
service: sls-page-tracker
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  logsBucketSourceARN: ${cf:raf-tech-website-stack.TechWebsiteAccessLogsBucketARN}

provider:
  name: aws
  runtime: python3.9
  profile: raf-tech
  region: ap-southeast-1
  memorySize: 128

  # Enable cors so we can post contact info from the web page
  httpApi:
    cors: true

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
  iam:
    deploymentRole: arn:aws:iam::801774630682:role/Tech-Web-Serverless-Deploy-Role
    role:
      statements:
        # IAM role to access S3 objects
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource:
            - ${self:custom.logsBucketSourceARN}
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource:
            - Fn::Join:
              - ''
              - - ${self:custom.logsBucketSourceARN}
                - "/logs*"
        # IAM statements to update DynamoDB (from internal resource)
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:Query"
          Resource:
            - Fn::GetAtt: [PageTrackTable, Arn]

  # Variables for all functions
  environment:
    TARGET_DYNAMO_TABLE: ${self:resources.Resources.PageTrackTable.Properties.TableName}

# you can add packaging information here
package:
 patterns:
   - '!test*'
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

functions:
  pagetracker:
    handler: handler.handle_s3_view_log
    logRetentionInDays: 30
    timeout: 10
    events:
      - s3:
          bucket: ${cf:raf-tech-website-stack.TechWebsiteAccessLogsBucket}
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: logs/

#    Define function environment variables here
    environment:
      WWW_BUCKET_NAME: www.${cf:raf-tech-website-stack.BlogWebsiteRootDomainURL}
      # PATH_PREFIX: blog/

  pagesharetracker:
    handler: handler.handle_page_share
    logRetentionInDays: 30
    timeout: 10
    events:
      - httpApi:
          path: /pageshare
          method: post

  pagecounttotals:
    handler: handler.handle_blog_page_count_totals
    logRetentionInDays: 30
    timeout: 10
    events:
      - httpApi:
          path: /pagetotals
          method: get

  pagecounthistory:
    handler: handler.handle_blog_page_access_list
    logRetentionInDays: 30
    timeout: 10
    events:
      - httpApi:
          path: /pagevisitlist
          method: get


# you can add CloudFormation resource templates here
resources:
  Description: Serverless Stack for Dynamo page-tracking functionality
  Resources:
    PageTrackTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PageTrackTable
        AttributeDefinitions:
         -
           AttributeName: UserPages
           AttributeType: S
         -
           AttributeName: SortKey
           AttributeType: S

        KeySchema:
          -
            AttributeName: UserPages
            KeyType: HASH
          -
            AttributeName: SortKey
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 7
          WriteCapacityUnits: 3
        SSESpecification:
          SSEEnabled: True
