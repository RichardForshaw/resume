# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: wwwstatuscheck
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: false
    useStaticCache: false
    slim: true
    #vendor: ./vendor

  # Variables for this deployment
  projectStackName: raf-tech-website-stack

provider:
  name: aws
  runtime: python3.9
  profile: raf-tech
  region: ap-southeast-1
  memorySize: 128

  # Enable cors so we can post contact info from the web page
  httpApi:
    cors: true

  # iam data
  iam:
    deploymentRole: arn:aws:iam::801774630682:role/Tech-Web-Serverless-Deploy-Role
    role:
      statements:
        # IAM statements for statuschecker lambda
        - Effect: "Allow"
          Action:
            - "SNS:Publish"
          Resource: ${cf:raf-tech-website-stack.TechWebsiteFailureNotificationTopicARN}
        # IAM statements for contactformemail lambda
        - Effect: "Allow"
          Action:
            - 'SES:SendEmail'
          Resource: "*"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
# Exclude all the NPM rubbish that we get...
package:
  patterns:
    - '!package-lock.json'
    - '!package.json'
    - '!node_modules/**'
    - '!.pytest_cache/**'
    - '!__pycache__/**'


functions:
  statuschecker:
    handler: handlers.run_health
    logRetentionInDays: 30
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - schedule: rate(30 minutes)
    environment:
      EXPECTED_WEBSITE_SIZE_KB: 20
      HEALTH_ALERT_SNS_ARN: ${cf:raf-tech-website-stack.TechWebsiteFailureNotificationTopicARN}

  contactformemail:
    handler: handlers.contact_form_email
    events:
      - httpApi: 'POST /contact_form'
    environment:
      CONTACT_FORM_TARGET_EMAIL: ${cf:${self:custom.projectStackName}.TechWebsiteContactFormTargetEmail}
      CONTACT_FORM_SOURCE_EMAIL: ${cf:${self:custom.projectStackName}.TechWebsiteContactFormSourceEmail}
      PB_TOKEN: ${env:PB_TOKEN}
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#    Define function environment variables here

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
